<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>一个简单的Python合并pdf脚本</title>
      <link href="/2018/06/20/python-pdf-merge/"/>
      <url>/2018/06/20/python-pdf-merge/</url>
      <content type="html"><![CDATA[<p>在学校打印店，有时会打印很多文件，因为文件数量多，过程会比较繁琐。自己没事动手写了一个pdf合并的python脚本，方便将多个pdf文件合并为一。这样打印时候只需点开一个文件打印即可。 </p><a id="more"></a><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="必要的安装"><a href="#必要的安装" class="headerlink" title="必要的安装"></a>必要的安装</h2><p>需要<a href="https://www.python.org/" target="_blank" rel="noopener">Python</a>和<a href="https://github.com/mstamy2/PyPDF2" target="_blank" rel="noopener">PyPDF2</a>。Python安装可在官网找到；PyPDF2可以通过pip安装，可以利用命令行工具输入一下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyPDF2</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将需要合并的文件与本文后面的Python脚本放在同一目录下，运行脚本得到<code>Merged.pdf</code>即为合并的pdf文件。</p><div class="bs-callout bs-callout-info"><p><em>脚本会将所在目录下所有pdf文件进行合并，须确保目录下只有需要合并的pdf文件。</em></p></div><h1 id="使用Tips"><a href="#使用Tips" class="headerlink" title="使用Tips"></a>使用Tips</h1><h2 id="按顺序合并pdf文件"><a href="#按顺序合并pdf文件" class="headerlink" title="按顺序合并pdf文件"></a>按顺序合并pdf文件</h2><p>如果需要按照一定顺序合并pdf文件，可以将pdf文件重命名，按顺序将文件重命名为<code>1.pdf</code>、<code>2.pdf</code>以此类推。</p><h2 id="重复合并同一pdf文件"><a href="#重复合并同一pdf文件" class="headerlink" title="重复合并同一pdf文件"></a>重复合并同一pdf文件</h2><p>如果需要将某一pdf文件在合并文件中重复多次，可以将该文件直接在当前目录下拷贝成多个副本。</p><h1 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">A simple python script to merge all the pdf files in the directory where this script is located.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Yuanyang Shao</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># find all the pdf files in current directory.</span></span><br><span class="line">    mypath = os.getcwd()</span><br><span class="line">    pattern = <span class="string">r"\.pdf$"</span></span><br><span class="line">    file_names_lst = [mypath + <span class="string">"\\"</span> + f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(mypath) <span class="keyword">if</span> re.search(pattern, f, re.IGNORECASE) </span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> re.search(<span class="string">r'Merged.pdf'</span>,f)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># merge the file.</span></span><br><span class="line">    opened_file = [open(file_name,<span class="string">'rb'</span>) <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names_lst]</span><br><span class="line">    pdfFM = PyPDF2.PdfFileMerger()</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> opened_file:</span><br><span class="line">        pdfFM.append(file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># output the file.</span></span><br><span class="line">    <span class="keyword">with</span> open(mypath + <span class="string">"\\Merged.pdf"</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> write_out_file:</span><br><span class="line">        pdfFM.write(write_out_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># close all the input files.</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> opened_file:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Windows下清除ssh-key私钥访问密码</title>
      <link href="/2017/12/25/ClearSshkeyPassword/"/>
      <url>/2017/12/25/ClearSshkeyPassword/</url>
      <content type="html"><![CDATA[<p>之前在配置Github时候，给本地生成的ssh-key加上了访问密码，因为所有ssh连接均采用了同一个key，给之后访问带来了很多的不便，查询相关资料找到取消该访问密码的方式。<br><a id="more"></a></p><p>首先，需要打开git-bash，（<strong>注意</strong>这里是不能使用Windows系统自带的终端或者powershell）输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -p</span><br><span class="line"></span><br><span class="line">Enter file in which the key is(/c/Users/YourUserName/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>命令会自动定位到默认生成的私钥，输入原始密码，在提示输入新密码时候，直接2次回车确认即可。</p>]]></content>
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh-key </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2017/10/29/gitnote/"/>
      <url>/2017/10/29/gitnote/</url>
      <content type="html"><![CDATA[<p>本文为本人在学习、实践Git过程中，所接触的Git命令的笔记记录，可将本文当作Git cheat sheet，为之后使用Git提供参考上的便利。</p><p>命令按照廖雪峰博客中<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>的顺序排列。在这里，对其工作表示感谢。在各种Git中文教程中，少有能结合具体工作场景介绍Git，往往侧重点放在Git的特点功能和相对应的命令上，使得初学者难以自然地接受。而廖大大的Git教程不仅清晰介绍出Git的主要功能，更将这部分功能相对的使用情形做出阐述，使读者更能体会出Git的用途，从而更好能学习Git。在这里强烈推荐将其作为Git入门教程。<br><a id="more"></a></p><h1 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>第一次安装Git成功后需要指定自己操作者的身份名称与邮箱地址。</p><h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#### 将当前工作路径变成本地git仓库 ####</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line">#### 将文件添加到缓存区 ####</span><br><span class="line">$ git add</span><br><span class="line">## 可一次添加多个文件</span><br><span class="line"></span><br><span class="line">#### 进行一次commit,并进行备注 ####</span><br><span class="line">$ git commit -m &apos;your comments&apos;</span><br><span class="line"></span><br><span class="line">#### 查看git状态， ####</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">#### 查看文件变动 ####</span><br><span class="line">$ git diff yourfile</span><br><span class="line"></span><br><span class="line">#### commit 日志 ####</span><br><span class="line">$ git log</span><br><span class="line">$ git log --pretty=oneline</span><br><span class="line"></span><br><span class="line">#### 回滚版本 ####</span><br><span class="line">$ git reset --hard commit_id</span><br><span class="line">## commit_id只用输入前n位能够区分就ok了</span><br><span class="line"></span><br><span class="line">#### 回到之后的版本，查看之后版本的commit_id ####</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line">#### 撤回工作区修改 ####</span><br><span class="line"># 回到暂存区或者上个commit点（如果没有commit）</span><br><span class="line">$ git checkout -- file</span><br><span class="line"># 撤销暂存区的修改</span><br><span class="line">$ git reset HEAD file</span><br><span class="line"></span><br><span class="line">#### 从版本库删除文件 ####</span><br><span class="line">$ git rm file</span><br><span class="line"></span><br><span class="line">#### 给commit提交标签 ####</span><br><span class="line">$ git tag v1.0 (commit_id) </span><br><span class="line">$ git tag -a v1.0 -m &apos;your note&apos;</span><br><span class="line"></span><br><span class="line">#### 查看标签 ####</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line">#### 删除标签 ####</span><br><span class="line">$ git tag -d &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line">#### 推送标签到远程库 ####</span><br><span class="line">$ git push origin &lt;tagname&gt;</span><br><span class="line">$ git push --tags</span><br><span class="line"></span><br><span class="line">#### 删除远程标签 ####</span><br><span class="line">$ git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#### 添加关联远程库 ####</span><br><span class="line">$ remote add origin git@github.com:name/gitname.git</span><br><span class="line">## origin 是远程库的名字 后面是在github中远程仓库地址</span><br><span class="line"></span><br><span class="line">#### 推送 ####</span><br><span class="line">$ git push -u origin master</span><br><span class="line">## 第一次推送，远程库是空的时, -u选项会将本地master分支和远程仓库的master分支关联，方便后面使用。 </span><br><span class="line"></span><br><span class="line">#### 克隆远程库 ####</span><br><span class="line">$ git clone</span><br></pre></td></tr></table></figure><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#### 创建分支 ####</span><br><span class="line">$ git branch branch_name</span><br><span class="line"></span><br><span class="line">#### 切换分支 ####</span><br><span class="line">$ git checkout branch_name</span><br><span class="line"></span><br><span class="line">#### 创建并切换分支 ####</span><br><span class="line">$ git checkout -b branch_name</span><br><span class="line"></span><br><span class="line">#### 查看分支与当前分支 ####</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line">#### 合并分支，合并指定分支到当前分支 ####</span><br><span class="line">$ git merge branch_name</span><br><span class="line"></span><br><span class="line">#### 以普通模式进行合并 ####</span><br><span class="line">$ git merge --no-ff -m &quot;your comments&quot; branch_name</span><br><span class="line"></span><br><span class="line">#### 删除指定分支 ####</span><br><span class="line">$ git branch -d branch_name</span><br><span class="line"></span><br><span class="line">#### 合并冲突分支 ####</span><br><span class="line">手动修改冲突文件后add+commit，利用git log可查看合并情况</span><br><span class="line"></span><br><span class="line">#### stash模式，临时保存当前工作区 ####</span><br><span class="line"># 临时保存当前环境</span><br><span class="line">$ git stash</span><br><span class="line"># 看当前环境</span><br><span class="line">$ git stash list</span><br><span class="line"># 调取之前存储的环境</span><br><span class="line">$ git stash pop</span><br><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line">$ git stash drop</span><br><span class="line"></span><br><span class="line">#### 强行删除某分支 ####</span><br><span class="line">$ git branch -D branch_name</span><br><span class="line"></span><br><span class="line">#### 与远程分支关联 ####</span><br><span class="line">$ git branch --set-upstream branch_name origin/&lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h1 id="Github使用"><a href="#Github使用" class="headerlink" title="Github使用"></a>Github使用</h1><p>github使用ssh连接，与本地匹配需要将1.在本地生成ssh秘钥对2.将ssh公钥记录至Github账户上，具体操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Step 1. 创建秘钥对</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">Step 2. 将用户目录下.ssh文件id_rsa.pub复制到Github上</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Programming with Python for Data Science学习笔记</title>
      <link href="/2017/08/12/DAT210x/"/>
      <url>/2017/08/12/DAT210x/</url>
      <content type="html"><![CDATA[<p>本文写于本人在<a href="https://www.edx.org/" target="_blank" rel="noopener">EdX</a>平台上学习<a href="https://www.edx.org/course/programming-python-data-science-microsoft-dat210x-5" target="_blank" rel="noopener">Programming with Python for Data Science</a>课程过程中。该课程主要讲述如何利用Python进行数据科学实践，内容涵盖Pandas、Sciki-learn等数据科学中常用包的主要命令，并结合实际数据集进行实战操作。在学习过程中，我将课程中学习到、代码作业中所遇到的命令在此进行归纳总结，以方便后面学习者查阅。另外该门课程中所用到命令也常在实际操作中用到，亦可将本文作为数据科学工作中的参考资料。<br><a id="more"></a><br>本文按照课程学习顺序对命令进行排序。另外命令方法的参数并未列全，只列出常用参数，更多参数功能可参见官方文档。</p><p>另外，我将课程Lab上机作业的代码放在我Github上托管<a href="https://github.com/shaoyy147/DAT210x-python_datascience" target="_blank" rel="noopener">DAT210</a>，若有需要，可供参考。</p><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h2 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h2><h3 id="读入csv等文本文件pd-read-csv"><a href="#读入csv等文本文件pd-read-csv" class="headerlink" title="读入csv等文本文件pd.read_csv()"></a>读入csv等文本文件<code>pd.read_csv()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'FilePath'</span>, header = <span class="keyword">None</span>, names = [<span class="string">'ColunName_1'</span>, <span class="string">'ColunName_N'</span> ], sep = <span class="string">','</span>, index_col = <span class="number">0</span>, na_values = <span class="string">'?'</span>)</span><br></pre></td></tr></table></figure><p>读入数据文件，转换为<code>Dataframe</code>格式，赋予<code>df</code>名称。位置参数<code>&#39;FilePath&#39;</code>指定数据文件路径；关键字参数<code>header</code>指定文件中，数据Feature的名称所在的行数，<code>None</code>表示数据文件中没有包含Feature的名称；参数<code>names</code>手动赋予Feature的名称；参数<code>sep</code>指定数据文件中的分隔符；参数<code>index_col</code>指定样本标签（唯一确定某条样本信息）所在的列数。</p><h3 id="读入html网页中的表格pd-read-html"><a href="#读入html网页中的表格pd-read-html" class="headerlink" title="读入html网页中的表格pd.read_html()"></a>读入html网页中的表格<code>pd.read_html()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_html(<span class="string">'URL'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>从网页中读入<strong>一系列</strong>表格，转换为<code>Dataframe</code>的<code>List</code>，取其中元素赋予<code>df</code>名称。位置参数<code>&#39;URL&#39;</code>指定读入网页的网址，<strong>注意</strong>可能需将<em>https</em>改为<em>http</em>，以匹配符合的协议。</p><h3 id="读入图像文件"><a href="#读入图像文件" class="headerlink" title="读入图像文件"></a>读入图像文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> misc</span><br><span class="line"></span><br><span class="line">sample = []</span><br><span class="line">img = misc.read(<span class="string">'FilePath'</span>)    <span class="comment">#读取文件</span></span><br><span class="line">sample.append((img / <span class="number">255.0</span>).reshape(<span class="number">-1</span>))      <span class="comment">#将文件转换至一维数组</span></span><br><span class="line">df = pd.DataFrame(sample)          <span class="comment">#转化为Dataframe格式</span></span><br></pre></td></tr></table></figure><h2 id="Dataframe数据集概览操作"><a href="#Dataframe数据集概览操作" class="headerlink" title="Dataframe数据集概览操作"></a>Dataframe数据集概览操作</h2><h3 id="浏览具体数据df-head-与df-tail"><a href="#浏览具体数据df-head-与df-tail" class="headerlink" title="浏览具体数据df.head()与df.tail()"></a>浏览具体数据<code>df.head()</code>与<code>df.tail()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(Num)</span><br><span class="line">df.tail(Num)</span><br></pre></td></tr></table></figure><p>返回<code>df</code>中前/后几行数据具体情况。位置参数<code>Num</code>指定行数。</p><h3 id="数值特征的统计量df-describe"><a href="#数值特征的统计量df-describe" class="headerlink" title="数值特征的统计量df.describe()"></a>数值特征的统计量<code>df.describe()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure><p>返回<code>df</code>中数值特征的相关统计量，包括样本量、最大（小）值、平均值、标准差、四分位数。在统一Feature Scaling 前可以用此命令观察数据的特点。</p><h3 id="浏览数据集中的特征df-columns与df-dtypes"><a href="#浏览数据集中的特征df-columns与df-dtypes" class="headerlink" title="浏览数据集中的特征df.columns与df.dtypes"></a>浏览数据集中的特征<code>df.columns</code>与<code>df.dtypes</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.colunms</span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><p><code>df,columns</code>返回<code>df</code>中特征的名称,<code>df.dtypes</code>返回<code>df</code>中特征的名称以及对应储存数据的类型。在导入数据过程中，可能因为各种原因所期望的数据类型与实际数据类型不同，会影响后面命令的执行，这时需要对进行数据类型转换。<strong>注意</strong>上述命令是<code>df</code>的属性，而非<code>df</code>的方法，即命令后无<code>()</code>。</p><h3 id="Feature的所有取值df-feature-unique"><a href="#Feature的所有取值df-feature-unique" class="headerlink" title="Feature的所有取值df.feature.unique()"></a>Feature的所有取值<code>df.feature.unique()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.feature_name.unique()</span><br></pre></td></tr></table></figure><p>返回数据集<code>df</code>的<code>feature_name</code>属性的所有取值。</p><h3 id="数据集切片"><a href="#数据集切片" class="headerlink" title="数据集切片"></a>数据集切片</h3><h4 id="常规切片"><a href="#常规切片" class="headerlink" title="常规切片"></a>常规切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取某些纵列，即选取全部样本的某些Feature</span></span><br><span class="line"><span class="comment">#以下命令返回Series对象,假设选取Feature名为'recency'的第0纵列，</span></span><br><span class="line">df.recency</span><br><span class="line">df[<span class="string">'recency'</span>]</span><br><span class="line">df.loc[:,<span class="string">'recency'</span>]</span><br><span class="line">df.iloc[:,<span class="number">0</span>]</span><br><span class="line">df.ix[:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下命令返回Dataframe对象</span></span><br><span class="line">df.[[<span class="string">'recency'</span>]]</span><br><span class="line">df.loc[:,[<span class="string">'recency'</span>]]</span><br><span class="line">df.iloc[:,[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#选取某些行，即选取某些样本的全部Feature</span></span><br><span class="line">df[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">2</span>,:]</span><br></pre></td></tr></table></figure><h4 id="条件选取切片"><a href="#条件选取切片" class="headerlink" title="条件选取切片"></a>条件选取切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df.recency &lt; <span class="number">7</span>) &amp; (df.newbie == <span class="number">0</span>)]</span><br></pre></td></tr></table></figure><p>返回<code>df</code>数据集中<code>&#39;recency&#39;</code>属性小于7且<code>&#39;newbie&#39;</code>属性等于0的样本</p><h2 id="数据集整理"><a href="#数据集整理" class="headerlink" title="数据集整理"></a>数据集整理</h2><h3 id="数据集Feature名称修改"><a href="#数据集Feature名称修改" class="headerlink" title="数据集Feature名称修改"></a>数据集Feature名称修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [<span class="string">'Feature_1'</span>,<span class="string">'Feature_2'</span>]</span><br></pre></td></tr></table></figure><h3 id="有序分类Feature转换"><a href="#有序分类Feature转换" class="headerlink" title="有序分类Feature转换"></a>有序分类Feature转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面以satisfaction属性为例</span></span><br><span class="line">ordered_satisfaction = [<span class="string">'Very Unhappy'</span>, <span class="string">'Unhappy'</span>, <span class="string">'Neutral'</span>, <span class="string">'Happy'</span>, <span class="string">'Very Happy'</span>]</span><br><span class="line">df.satisfaction = df.satisfaction.astype(<span class="string">"category"</span>,</span><br><span class="line">                                         ordered=<span class="keyword">True</span>,categories=ordered_satisfaction).cat.codes</span><br></pre></td></tr></table></figure><p>将<code>df</code>数据集中分类Feature<code>satisfaction</code>从文本属性转换为整数表示，1对应<code>&#39;Very Unhappy&#39;</code>，5对应<code>&#39;Very Happy&#39;</code>，-1表示无对应。<code>astype(&quot;category&quot;, ordered = True, categories = ordered_satisfaction)</code>方法将<code>Series</code>按照<code>categories</code>参数转换为有序的<code>category</code>类型，<code>cat.codes</code>为<code>category</code>类型所对应的数字编码。</p><h3 id="无序分类Feature转换pd-get-dummies"><a href="#无序分类Feature转换pd-get-dummies" class="headerlink" title="无序分类Feature转换pd.get_dummies()"></a>无序分类Feature转换<code>pd.get_dummies()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.get_dummies(df,columns=[<span class="string">'column_1'</span>,<span class="string">'column_2'</span>])</span><br></pre></td></tr></table></figure><p>将数据集<code>df</code>中无序分类Feature<code>column_1</code>和<code>column_2</code>转换为dummy表示(0/1表示)。位置参数<code>df</code>指定待操作的数据集；关键字参数<code>columns</code>指定待操作的Feature。</p><h3 id="缺省Nan值替换df-fillna-与df-feature-fillna"><a href="#缺省Nan值替换df-fillna-与df-feature-fillna" class="headerlink" title="缺省Nan值替换df.fillna()与df.feature.fillna()"></a>缺省Nan值替换<code>df.fillna()</code>与<code>df.feature.fillna()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#df.fillna()与df.feature.fillna()参数相同，下例只说明前者</span></span><br><span class="line">df.fillna(<span class="number">0</span>)</span><br><span class="line">df.fillna(method = <span class="string">'ffill'</span>, limit = <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>第一行命令将数据集<code>df</code>中的所检索到的Nan值用0替换掉。第二行命令将数据集<code>df</code>中所检索到的Nan值用前一条样本的对应值替代，关键字参数<code>method</code>指定替代的方法，<code>limit</code>指定替换的最大间隔（在连续多个数据都为Nan时用到），具体方法参见<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="数据剔除df-drop-与df-dropna"><a href="#数据剔除df-drop-与df-dropna" class="headerlink" title="数据剔除df.drop()与df.dropna()"></a>数据剔除<code>df.drop()</code>与<code>df.dropna()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = df.dropna(axis = <span class="number">0</span>, thresh = <span class="number">5</span>)</span><br><span class="line">df = df.drop(labels=[<span class="string">'column_1'</span>,<span class="string">'column_2'</span>],axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>第一行命令将<code>df</code>数据集中有5项及其以上属性为Nan的数据剔除，关键字参数<code>axis</code>指定剔除数据集的行（样本）或列（属性），0表示剔除行，1表示剔除列，<code>thresh</code>指定当出现多少Nan值时剔除该项。第二行命令剔除<code>df</code>数据集中<code>&#39;column_1&#39;</code>和<code>&#39;column_2&#39;</code>属性，关键字参数<code>label</code>指定所剔除的项,<code>axis</code>指定剔除数据集的行（样本）或列（属性），0表示剔除行，1表示剔除列。</p><h3 id="数据类型转化pd-to-numeric"><a href="#数据类型转化pd-to-numeric" class="headerlink" title="数据类型转化pd.to_numeric()"></a>数据类型转化<code>pd.to_numeric()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.Num = pd.to_numeric(df.Num, errors = <span class="string">'coerce'</span>)</span><br></pre></td></tr></table></figure><p>将数据集<code>df</code>中<code>Num</code>属性下数据转换为相应的数值类型。位置参数指定所有转化的<code>Series</code>，关键字参数<code>errors</code>指定处理错误的方式，<code>&#39;coerce&#39;</code>将无法转化的值转化为Nan。在读取数据时，需要特别注意，往往所期望的数据类型与实际的数据类型不一致，这会导致数据处理上的错误，这要求需要对处理数据前，检查数据类型，并转化为所期望的数据类型。</p><h3 id="数据编号重排reset-index"><a href="#数据编号重排reset-index" class="headerlink" title="数据编号重排reset_index()"></a>数据编号重排<code>reset_index()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.reset_index(drop = <span class="keyword">True</span>, inplace = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>将数据集<code>df</code>的编号重新编排。关键字参数<code>drop</code>指定是否保留原有的编号，参数<code>inplace</code>指定是否在原有数据集上操作，或返回一个新的数据集。当对样本进行剔除后，数据集样本编号不会随之变动，利用<code>reset_index()</code>方法对数据集编号进行重新编排。</p><h3 id="数据特征缩放Feature-Scaling"><a href="#数据特征缩放Feature-Scaling" class="headerlink" title="数据特征缩放Feature Scaling"></a>数据特征缩放Feature Scaling</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Normalizer</span><br><span class="line"></span><br><span class="line">norm = Normalizer()</span><br><span class="line">norm.fit(df)</span><br><span class="line">df = norm.transform(df)</span><br></pre></td></tr></table></figure><p>Normalize数据特征，使得数据在同一Scale下，在K近邻算法，PCA主成分降维算法等中常用到。除<code>Normalizer</code>方法外，常用特征放缩方法还有<code>MinMaxScaler</code>,<code>RobustScaler</code>,<code>StandardScaler</code>。</p><h3 id="数据训练集与测试集分离train-test-split"><a href="#数据训练集与测试集分离train-test-split" class="headerlink" title="数据训练集与测试集分离train_test_split()"></a>数据训练集与测试集分离<code>train_test_split()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">data_train, data_test, label_train, label_test = train_test_split(data, labels,</span><br><span class="line">                                                                  test_size=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>将训练样本<code>data</code>与其对应标签<code>labels</code>随机分成训练集、测试集。关键字参数<code>test_size</code>指定测试集占总样本的比例。</p><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="基础图像绘制"><a href="#基础图像绘制" class="headerlink" title="基础图像绘制"></a>基础图像绘制</h2><h3 id="条形图Histogramsdf-plot-hist"><a href="#条形图Histogramsdf-plot-hist" class="headerlink" title="条形图Histogramsdf.plot.hist()"></a>条形图Histograms<code>df.plot.hist()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.style.use(<span class="string">'ggplot'</span>) <span class="comment">#制定图像绘制风格</span></span><br><span class="line"></span><br><span class="line">df.plot.hist(alpha = <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>绘制数据集<code>df</code>上条形图，关键字参数<code>alpha</code>制定柱形的透明程度，0表示完全透明，1表示完全不透明。</p><h3 id="二维散点图2D-Scatterdf-plot-scatter"><a href="#二维散点图2D-Scatterdf-plot-scatter" class="headerlink" title="二维散点图2D-Scatterdf.plot.scatter()"></a>二维散点图2D-Scatter<code>df.plot.scatter()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">df.plot.scatter(x = <span class="string">'feature_1'</span>, y = <span class="string">'feature_2'</span>)</span><br></pre></td></tr></table></figure><p>绘制数据集<code>df</code>上关于属性<code>&#39;feature_1&#39;</code>和<code>&#39;feature_2&#39;</code>的散点图，关键字参数<code>x</code>和<code>y</code>指定需要作出散点图的两个数据集的Feature。</p><h3 id="三维散点图3D-Scatterdf-plot-scatter"><a href="#三维散点图3D-Scatterdf-plot-scatter" class="headerlink" title="三维散点图3D-Scatterdf.plot.scatter()"></a>三维散点图3D-Scatter<code>df.plot.scatter()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_tookits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure()      <span class="comment">#生成figure类的实例fig</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection = <span class="string">'3d'</span>)   <span class="comment">#在fig上添加图，设置为3d坐标图</span></span><br><span class="line">ax.set_xlabel(<span class="string">'xlabel'</span>)    <span class="comment">#设置xyz坐标轴的名称</span></span><br><span class="line">ax.set_ylabel(<span class="string">'ylabel'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'zlabel'</span>)</span><br><span class="line">ax.scatter(df.feature_1, df.feature_2, df.feature_3, c=<span class="string">'r'</span>, marker = <span class="string">'.'</span>)  </span><br><span class="line"><span class="comment">#绘制三维图，关键字参数c制定散点的颜色，参数marker制定散点图案类型</span></span><br><span class="line">plt.show()   <span class="comment">#显示绘制图像</span></span><br></pre></td></tr></table></figure><p>绘制关于数据集<code>df</code>的三个属性<code>feature_1`</code>feature_2<code></code>feature_3<code>的三维散点图。**注意**</code>Pandas`并未自带的绘制三维散点图的方法。</p><h2 id="高维数据图像绘制"><a href="#高维数据图像绘制" class="headerlink" title="高维数据图像绘制"></a>高维数据图像绘制</h2><h3 id="Parallel-Coordinate-parallel-coordinates"><a href="#Parallel-Coordinate-parallel-coordinates" class="headerlink" title="Parallel Coordinate parallel_coordinates()"></a>Parallel Coordinate <code>parallel_coordinates()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">parallel_coordinates(df, <span class="string">'cat_names'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制数据集<code>df</code>的Parallel Coordinate图像，位置参数<code>df</code>制定绘制的数据集，参数<code>cat_names</code>指定分类所依据的Feature。<strong>注意</strong>Matplotlib包的parallel_coordinates所绘制的所有纵坐标量级尺度都是一样，无法不同Feature不同处理。</p><h3 id="Andrew’s-Curves-andrews-curves"><a href="#Andrew’s-Curves-andrews-curves" class="headerlink" title="Andrew’s Curves andrews_curves()"></a>Andrew’s Curves <code>andrews_curves()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.tools.plotting <span class="keyword">import</span> andrews_curves</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">andrews_curves(df, <span class="string">'cat_names'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制数据集<code>df</code>的Andrew’s Curves图像，位置参数<code>df</code>制定绘制的数据集，参数<code>cat_names</code>指定分类所依据的Feature。</p><h3 id="Imshow-plt-imshow"><a href="#Imshow-plt-imshow" class="headerlink" title="Imshow plt.imshow()"></a>Imshow <code>plt.imshow()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制图像</span></span><br><span class="line">plt.imshow(df.corr(), cmap=plt.cm.Blues, interpolation=<span class="string">'nearest'</span>)</span><br><span class="line"><span class="comment">#以下设置坐标名称</span></span><br><span class="line">tick_marks = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df.columns))]</span><br><span class="line">plt.xticks(tick_marks, df.columns, rotation=<span class="string">'vertical'</span>)</span><br><span class="line">plt.yticks(tick_marks, df.columns)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制数据集<code>df</code>相关矩阵的Imshow图像。Imshow图像可用于找出相关程度较高的一组Feature。</p><h1 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h1><h2 id="主成分分析PCA"><a href="#主成分分析PCA" class="headerlink" title="主成分分析PCA"></a>主成分分析PCA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">pca = PCA(n_components = <span class="number">2</span>, svd_solver = <span class="string">'full'</span>)</span><br><span class="line">pca.fit(df)</span><br><span class="line">T = pca.transform(df)</span><br></pre></td></tr></table></figure><p>根据设置，利用数据集<code>df</code>训练模型，并将训练后的模型应用于数据集<code>df</code>上，返回的结果储存于<code>T</code>。<code>PCA()</code>生成PCA类实例，参数<code>n_component</code>指定最后主成分个数，<code>svd_solver</code>指定模型运算算法。<code>fit()</code>方法将<code>df</code>数据集应用于模型上。<code>transform()</code>方法将<code>df</code>按照训练后的模型转化为新的数据集。</p><h2 id="流形降维Isomap"><a href="#流形降维Isomap" class="headerlink" title="流形降维Isomap"></a>流形降维Isomap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold</span><br><span class="line"></span><br><span class="line">iso = manifold.Isomap(n_neighbors = <span class="number">5</span>, n_components = <span class="number">3</span>)</span><br><span class="line">iso.fit(df)</span><br><span class="line">T = iso.transform(df)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>df</code>训练模型，并将训练后的模型应用于数据集<code>df</code>上，返回的结果储存于<code>T</code>。<code>Isomap()</code>生成Isomap类实例，参数<code>n_neighbors</code>指定邻域节点数，参数<code>n_component</code>指定最后主成分个数。<code>fit()</code>方法将<code>df</code>数据集应用于模型上。<code>transform()</code>方法将<code>df</code>按照训练后的模型转化为新的数据集。</p><h1 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h1><h2 id="聚类K-Means"><a href="#聚类K-Means" class="headerlink" title="聚类K-Means"></a>聚类K-Means</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line">kmeans = KMeans(n_clusters = <span class="number">5</span>, n_init = <span class="number">10</span>)</span><br><span class="line">kmeans.fit(df)</span><br><span class="line">kmeans.cluster_centers_</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>df</code>训练模型，并将训练后的模型应用于数据集<code>df</code>上，返回的结果储存于<code>T</code>。<code>KMeans()</code>生成KMeans类实例，参数<code>n_clusters</code>指定分类数，参数<code>n_init</code>指定算法重复执行次数。<code>fit()</code>方法将<code>df</code>数据集应用于模型上。属性<code>cluster_centers_</code>返回训练后模型的各类中心点坐标。</p><h2 id="K近邻K-Nearest-Neighbors"><a href="#K近邻K-Nearest-Neighbors" class="headerlink" title="K近邻K-Nearest Neighbors"></a>K近邻K-Nearest Neighbors</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">3</span>, weights = <span class="string">'uniform'</span>)</span><br><span class="line">model.fit(X_train, y_train) </span><br><span class="line">model.score(X_test, y_test)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>X_train</code>与其对应标签<code>y_train</code>训练模型。<code>KNeighborsClassifier()</code>生成KNeighborsClassifier类实例，参数<code>n_neighbors</code>指定预测数据距离最近的训练样本的数量，参数<code>weights</code>指定最近样本决定预测数据的方式，<code>uniform</code>表示所有样本权重一致，此外还有<code>distance</code>，表示样本按距离远近的倒数赋予相应权值。<code>score()</code>方法返回模型在测试集上的准确率。</p><h2 id="线性回归Linear-Regression"><a href="#线性回归Linear-Regression" class="headerlink" title="线性回归Linear Regression"></a>线性回归Linear Regression</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"></span><br><span class="line">model = linear_model.LinearRegression()</span><br><span class="line">model.fix(X_train, y_train)</span><br><span class="line">model.score(X_test, y_test)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>X_train</code>与其对应标签<code>y_train</code>训练模型。<code>LinearRegression()</code>生成LinearRegression类实例，<code>score()</code>方法返回模型在测试集上的准确率,即计算R平方值。</p><h2 id="支持向量机SVM"><a href="#支持向量机SVM" class="headerlink" title="支持向量机SVM"></a>支持向量机SVM</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line">model = SVC(kernel = <span class="string">'linear'</span>,C = <span class="number">1.0</span> gamma = <span class="number">0.1</span>)</span><br><span class="line">model.fix(X_train, y_train)</span><br><span class="line">model.score(X_test, y_test)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>X_train</code>与其对应标签<code>y_train</code>训练模型。<code>SVC()</code>生成SVC类实例，参数<code>kernel</code>指定kernel函数，参数<code>C</code>指定错误惩罚程度，该参数越大，对错误样本惩罚值越高，越可能导致过度拟合。<code>score()</code>方法返回模型在测试集上的准确率,即计算R平方值。</p><h2 id="决策树Decision-Tree"><a href="#决策树Decision-Tree" class="headerlink" title="决策树Decision Tree"></a>决策树Decision Tree</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line">model = tree.DecisionTreeClassifier(max_depth = <span class="number">5</span>, criterion = <span class="string">'entropy'</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">tree.export_graphviz(model.tree_, out_file=<span class="string">'tree.dot'</span>, feature_names=X.columns)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>X_train</code>与其对应标签<code>y_train</code>训练模型。<code>DecisionTreeClassifier()</code>生成DecisionTreeClassifier类实例，参数<code>max_depth</code>指定树的深度；参数<code>criterion</code>指定树分支的计算指标，默认为Gini系数，’entropy’计算商。<code>tree.export_graphviz()</code>方法输出训练后模型的可视化图像文件，该图像文件需系统中安装树可视化软件<a href="http://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>。</p><h2 id="随机森林Random-Forest"><a href="#随机森林Random-Forest" class="headerlink" title="随机森林Random Forest"></a>随机森林Random Forest</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">model = RandomForestClassifier(n_estimators = <span class="number">10</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p>根据参数设置，利用数据集<code>X_train</code>与其对应标签<code>y_train</code>训练模型。参数<code>n_estimators</code>指定随机森林中数的数量。</p><h1 id="模型评价与整合"><a href="#模型评价与整合" class="headerlink" title="模型评价与整合"></a>模型评价与整合</h1><h2 id="Confusion-Metrix"><a href="#Confusion-Metrix" class="headerlink" title="Confusion Metrix"></a>Confusion Metrix</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> metrics</span><br><span class="line"></span><br><span class="line">metrics.confusion_matrix(y_true, y_pred)</span><br></pre></td></tr></table></figure><p>输出度量Confusion Metrix，每行表示每类实际结果的预测分布情况，每列表示每类预测结果的实际值分布情况。以下给出Confusion Metrix与imshow图像的结合应用的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">columns = [<span class="string">'Cat'</span>, <span class="string">'Dog'</span>, <span class="string">'Monkey'</span>]</span><br><span class="line">confusion = metrics.confusion_matrix(y_true, y_pred)</span><br><span class="line"></span><br><span class="line">plt.imshow(confusion, cmap=plt.cm.Blues, interpolation=<span class="string">'nearest'</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], columns, rotation=<span class="string">'vertical'</span>)</span><br><span class="line">plt.yticks([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], columns)</span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="验证Validation"><a href="#验证Validation" class="headerlink" title="验证Validation"></a>验证Validation</h2><h3 id="度量矩阵"><a href="#度量矩阵" class="headerlink" title="度量矩阵"></a>度量矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> metrics</span><br><span class="line">y_true = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">y_pred = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># recall = true_positives / (true_positives + false_negatives)</span></span><br><span class="line">metrics.recall_score(y_true, y_pred, average=<span class="string">'weighted'</span>)   <span class="comment">#average参数用于指定各类平均方法</span></span><br><span class="line"><span class="comment"># precision = true_positives / (true_positives + false_positives)</span></span><br><span class="line">metrics.precision_score(y_true, y_pred, average=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># F1 = 2 * (precision * recall) / (precision + recall)</span></span><br><span class="line">metrics.f1_score(y_true, y_pred, average=<span class="string">'weighted'</span>)</span><br><span class="line"></span><br><span class="line">target_names = [<span class="string">'name 1'</span>, <span class="string">'name 2'</span>, <span class="string">'name 3'</span>]</span><br><span class="line">metrics.classification_report(y_true, y_pred, target_names=target_names)</span><br></pre></td></tr></table></figure><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> cross_validation <span class="keyword">as</span> cval</span><br><span class="line">cval.cross_val_score(model, X_train, y_train, cv=<span class="number">10</span>) <span class="comment">#返回每组的训练集下的准确度 cv制定分组数</span></span><br><span class="line">cval.cross_val_score(model, X_train, y_train, cv=<span class="number">10</span>).mean() <span class="comment">#返回平均值</span></span><br></pre></td></tr></table></figure><h2 id="模型参数调整grid-search"><a href="#模型参数调整grid-search" class="headerlink" title="模型参数调整grid_search"></a>模型参数调整<code>grid_search</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> grid_search</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">'kernel'</span>:(<span class="string">'linear'</span>, <span class="string">'rbf'</span>), <span class="string">'C'</span>:[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]&#125;</span><br><span class="line">model = svm.SVC()</span><br><span class="line">classifier = grid_search.GridSearchCV(model, parameters)  </span><br><span class="line">classifier.fit(X_train, y_train)</span><br><span class="line"><span class="comment">#以上根据参数的可能性，进行组合比较训练，得到最佳的模型参数</span></span><br><span class="line"></span><br><span class="line">parameter_dist = &#123;</span><br><span class="line">  <span class="string">'C'</span>: scipy.stats.expon(scale=<span class="number">100</span>),</span><br><span class="line">  <span class="string">'kernel'</span>: [<span class="string">'linear'</span>],</span><br><span class="line">  <span class="string">'gamma'</span>: scipy.stats.expon(scale=<span class="number">.1</span>),</span><br><span class="line">&#125;</span><br><span class="line">classifier = grid_search.RandomizedSearchCV(model, parameters_dist)  </span><br><span class="line">classifier.fit(X_train, y_train)</span><br><span class="line"><span class="comment">#以上根据参数的所指定的分布，进行组合比较训练，得到最佳的模型参数</span></span><br></pre></td></tr></table></figure><h2 id="模型Pipeline"><a href="#模型Pipeline" class="headerlink" title="模型Pipeline"></a>模型Pipeline</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line">svc = svm.SVC(kernel=<span class="string">'linear'</span>)</span><br><span class="line">pca = RandomizedPCA()</span><br><span class="line">pipeline = Pipeline([(<span class="string">'pca'</span>, pca),(<span class="string">'svc'</span>, svc)])</span><br><span class="line">pipeline.set_params(pca__n_components=<span class="number">5</span>, svc__C=<span class="number">1</span>, svc__gamma=<span class="number">0.0001</span>)</span><br><span class="line">pipeline.fit(X, y)</span><br></pre></td></tr></table></figure><p>将多个模型由前至后连接，整合成一个机器学习模型。需要注意的是中间模型需要有<code>.fit()</code> <code>.transform()</code>方法 ，如果原类无对应方法，可以自定义相对应的方法，以适应Pipeline的运行。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python </tag>
            
            <tag> Data Science </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写在最前面的</title>
      <link href="/2017/08/11/the-first-page/"/>
      <url>/2017/08/11/the-first-page/</url>
      <content type="html"><![CDATA[<p>这些天，我一直在试图回答这样一个问题——我为什么要开通个人小站？</p><p>为了建站前前后后折腾3周，调整好模板，选定好主题，一切如火如荼进行。我是一个形式主义者，且不管所做是否有所谓的价值，总需要一种仪式化开端，规则化执行。就算小站的奠基也应该有一篇文字来满足自己的癖好。<br><a id="more"></a><br>真要写点什么，想写，却又无从下手。就像开头那个问题，我执念要建站，却道不清所以然。</p><p>今年我21，处在人生港口的阶段，慢慢地探求世界，慢慢地了解自己。大学四年已过三，很快就要踏出安适环境，靠着自己的力量在更大的世界去行走。在这个更大的世界上，人都有自己的活法，人都有自己的境遇。我相信这样一句话，你的眼界决定你所能达到的高度。很多时候，我觉得我是很幸运的，我见到过这个世界不同的写照，见到过不同的经历，见到过不同的方式，见到过不同的待遇。我不会认为我所看到的就会带给我人生的成就，但我相信我所看到的会带给我人生的富足。我决定要去探索更多。在这个过程中，有很多帮助过我的人，认识的或不认识的，直接的或者间接的。</p><p>我体会最深的是，每个人都可以经历一段有独立价值的人生，每个人都应该有自由追逐的意愿与能力。或许很多不幸福缘于视野的狭隘，但这并不是囿于不幸福，困于各种局限的理由。世界之大，世界的广，总有一处可以去释放自己。</p><p>就像很多帮助过我的人一样，我也愿意去让更多的人去了解世界，去分享我所学习到的新事物。我想去打开一个窗口，去告诉大家，我所窥见的世界是如何如何，或许我所经历的世界也不全尽人意，但我愿更多的人通过我的零零星星、点点滴滴去找到属于自己的世界。</p><p>最后我想说，在这个快节奏的时代，能安心阅读的人并不多，我并非能感动心灵的写手，也无发阐述一针见血的洞见，要是能在我的文字上刷上一遭，我也倍感荣幸，希望我的小站能为你提供些许帮助。谢谢你留下时光匆匆！</p><p>17年8月于北京</p>]]></content>
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
